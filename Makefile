
# Toolchain Configuration
TOOLCHAIN := arm-none-eabi-
#TOOLCHAIN := /toolchain/arm-eabi-10.2.0/bin/arm-eabi-

QEMU     := qemu-system-arm
QFLAGS   := -cpu cortex-m4 -machine netduinoplus2 -nographic 
QFLAGS   += -semihosting-config enable=on,target=native
 
XCC      := $(TOOLCHAIN)gcc
XLD      := $(TOOLCHAIN)ld
XOBJCOPY := $(TOOLCHAIN)objcopy
XOBJDUMP := $(TOOLCHAIN)objdump

# Memory Layout Configuration
ROM_BASE   := 0x00000000
ROM_SIZE   := 0x00010000
RAM_BASE   := 0x20000000
RAM_SIZE   := 0x00010000
STACK_SIZE := 0x00000400
HEAP_SIZE  := 0x00000000

# Compiler Configuration
XARCH    := -mcpu=cortex-m4 -mthumb -mabi=aapcs
XARCH    += -mfloat-abi=hard -mfpu=fpv4-sp-d16

XCFLAGS  := -nostdlib -ffreestanding $(XARCH)
XCFLAGS  += -ffunction-sections -fdata-sections
XCFLAGS  += -fno-builtin -fno-strict-aliasing
XCFLAGS  += -Wall -g -O0 -std=c11
XCFLAGS  += -Iinclude

XLDFLAGS := -nostdlib -ffreestanding $(XARCH)
XLDFLAGS += -Wl,--gc-sections -Tout/script.ld

LINKSCRIPT := cmsis/cortex-m-mcu.ld

# Project Source Files
SRC := cmsis/startup-cm4.S
SRC += app/hello.c
SRC += lib/semihosting.S

# enabling this will require fiddling with exidx sections
# and generated unwind glue (yuck)
#XLIBS := -lgcc

# Build Engine
# (no user-serviceable parts inside)

XDEPS := Makefile

all: out/app.bin out/app.lst

qemu: out/app.elf out/app.bin out/app.lst
	$(QEMU) $(QFLAGS) -kernel out/app.elf

# Source to object transform
XCOBJS := $(addprefix out/,$(patsubst %.c,%.o,$(filter %.c,$(SRC))))
XAOBJS := $(addprefix out/,$(patsubst %.S,%.o,$(filter %.S,$(SRC))))
XOBJS := $(XCOBJS) $(XAOBJS)

out/script.ld: Makefile
	@mkdir -p $(dir $@)
	@echo "/* autogenerated */" > $@
	@echo "__ROM_BASE = $(ROM_BASE);" >> $@
	@echo "__ROM_SIZE = $(ROM_SIZE);" >> $@
	@echo "__RAM_BASE = $(RAM_BASE);" >> $@
	@echo "__RAM_SIZE = $(RAM_SIZE);" >> $@
	@echo "__STACK_SIZE = $(STACK_SIZE);" >> $@
	@echo "__HEAP_SIZE = $(HEAP_SIZE);" >> $@
	@echo "INCLUDE \"$(LINKSCRIPT)\"" >> $@

$(XCOBJS): out/%.o: %.c $(XDEPS)
	@mkdir -p $(dir $@)
	$(XCC) $(XCFLAGS) -c $< -MD -MP -MT $@ -MF $(@:%o=%d) -o $@

$(XAOBJS): out/%.o: %.S $(XDEPS)
	@mkdir -p $(dir $@)
	$(XCC) $(XCFLAGS) -c $< -MD -MP -MT $@ -MF $(@:%o=%d) -o $@

out/app.elf: out/script.ld $(XOBJS) $(LINKSCRIPT)
	@mkdir -p $(dir $@)
	$(XCC) $(XLDFLAGS) $(XOBJS) $(XLIBS) -o $@

out/app.bin: out/app.elf
	@mkdir -p $(dir $@)
	$(XOBJCOPY) -O binary $< $@

out/app.lst: out/app.elf
	@mkdir -p $(dir $@)
	$(XOBJDUMP) -d $< > $@

# include auto-deps
-include $(XOBJS:%o=$d)

clean::
	rm -rf out


